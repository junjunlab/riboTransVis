% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/serp-visualization.R
\name{enrichment_plot1}
\alias{enrichment_plot1}
\alias{enrichment_plot1,serp-method}
\title{Plot ribosome profiling enrichment with smoothing and confidence intervals}
\usage{
enrichment_plot1(object, ...)

\S4method{enrichment_plot1}{serp}(
  object,
  shadow_alpha = c(0.1, 0.3),
  window_size = 45,
  retain_cds = TRUE,
  log2_transform = FALSE,
  mode = c("codon", "nt"),
  new_signal_range = FALSE,
  enrich_threshold = 1,
  range_x = 0.99,
  range_y = 0.98,
  range_size = 4,
  range_digit = 1,
  exon_line = c("grey", 3),
  cds_line = c("grey30", 7),
  sample_col = NULL,
  facet = facet_grid(sample ~ rname, switch = "y"),
  nrow = NULL,
  ncol = NULL,
  return_data = FALSE
)
}
\arguments{
\item{object}{An object of class \code{serp} containing:
\itemize{
\item \verb{@total_occupancy}: Total counts per position
\item \verb{@ip_occupancy}: IP counts per position
\item \verb{@features}: Transcript feature information
\item \verb{@library}: Mapping statistics
\item \verb{@gene_name}: The gene of interest
}}

\item{...}{Additional arguments (currently unused).}

\item{shadow_alpha}{A numeric vector of length two specifying the transparency range for the confidence interval shading. Default is \code{c(0.1, 0.3)}.}

\item{window_size}{Integer. Size of the sliding window for smoothing. Default \code{45}.}

\item{retain_cds}{Logical. If \code{TRUE}, plot only the CDS region; if \code{FALSE}, include UTRs as well. Default \code{TRUE}.}

\item{log2_transform}{Logical. If \code{TRUE}, apply log2 scale to the y-axis (enrichment values). Default \code{FALSE}.}

\item{mode}{Character. Should be \code{"codon"} (default) to display x-axis in codons/amino acids, or \code{"nt"} to display in nucleotides.}

\item{new_signal_range}{Logical. Whether to add an annotation indicating the signal range (max smoothed ratio). Default \code{FALSE}.}

\item{enrich_threshold}{Numeric. A threshold line is drawn at this enrichment value. Default is \code{1}.}

\item{range_x}{Numeric. Position of the signal range label on the plot (only used if \code{new_signal_range = TRUE}).}

\item{range_y}{Numeric. Position of the signal range label on the plot (only used if \code{new_signal_range = TRUE}).}

\item{range_size}{Numeric. Font size for the signal range annotation label.}

\item{range_digit}{Integer. Number of digits used when displaying the maximum enrichment value.}

\item{exon_line}{A character vector specifying color and size for exon structure lines, e.g., \code{c("grey", 3)}.}

\item{cds_line}{A character vector specifying color and size for CDS structure lines, e.g., \code{c("grey30", 7)}.}

\item{sample_col}{Named character vector. Manual color mapping for samples. If \code{NULL}, default ggplot2 colors are used.}

\item{facet}{A ggplot2 facetting function, e.g., \code{facet_grid(sample ~ rname, switch = "y")}. Controls how plots are arranged.}

\item{nrow}{Integers. Number of rows and columns when combining multiple transcript plots.}

\item{ncol}{Integers. Number of rows and columns when combining multiple transcript plots.}

\item{return_data}{Logical. If \code{TRUE}, returns the smoothed enrichment calculation results as a dataframe instead of plotting. Default \code{FALSE}.}
}
\value{
\itemize{
\item If \code{return_data = FALSE}, returns a \code{ggplot} or \code{cowplot} object containing the plotted results.
\item If \code{return_data = TRUE}, returns a \code{data.frame} containing:
\itemize{
\item \code{sample}, \code{rname} - sample and transcript ID
\item \code{winstart} - start position of the sliding window
\item \code{win_ip}, \code{win_total} - counts in IP and Total within each window
\item \code{enrich}, \code{lower}, \code{upper} - mean enrichment and its 95\% confidence interval
\item \code{bin} - window size
\item \code{nmft} - normalization factor (IP library size/Total library size)
}
}
}
\description{
\code{enrichment_plot1} creates a detailed visualization of ribosome profiling data, showing the enrichment of IP (immunoprecipitation) over total RNA across transcripts. It applies sliding window smoothing and calculates binomial confidence intervals using the Agrestiâ€“Coull method. Users can customize axis scaling, whether to focus on just the CDS region, and whether to display nucleotide (nt) or codon (amino acid) units on the x-axis.
}
\details{
The function first smooths the raw counts using a sliding window approach. For each window, it computes the proportion enriched (IP over IP+Total), and uses Agresti-Coull binomial confidence intervals via the \code{binom} package. The enrichment values are normalized using library sizes.

Depending on the mode:
\itemize{
\item \code{mode = "codon"}: x-axis position is rescaled by 3 to show codon units.
\item \code{mode = "nt"}: x-axis position shows nucleotides.
}

If \code{retain_cds = FALSE}, the full transcript including UTRs is plotted. Structural annotations visually mark exons and CDS regions separately.

Users can opt to display enrichment on a log2 scale for better dynamic range visualization. Multiple samples and transcripts can be plotted together leveraging ggplot2 faceting.

Requires the following R packages: \code{dplyr}, \code{purrr}, \code{ggplot2}, \code{ggside}, \code{cowplot}, \code{binom}, and optionally \code{ggpp}.
}
\section{Notes}{

\itemize{
\item Plots generated with \code{ggside} append a horizontal bar displaying transcript structure along the x-axis.
\item If packages \code{binom}, \code{ggpp}, or \code{cowplot} are missing, a warning will be issued and some features may be disabled.
}
}

\examples{
\dontrun{
# Load a `serp` object
data(serp_example)

# Basic plot, codon unit, focus on CDS
enrichment_plot1(serp_example)

# Plot using nucleotide unit including UTRs
enrichment_plot1(serp_example, mode = "nt", retain_cds = FALSE)

# Return smoothed data instead of plot
df <- enrichment_plot1(serp_example, return_data = TRUE)

# Customize sample colors
enrichment_plot1(serp_example, sample_col = c(Sample1 = "blue", Sample2 = "red"))

# Display enrichment on log2 scale
enrichment_plot1(serp_example, log2_transform = TRUE)
}



}
