% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/serp-visualization.R
\name{trans_plot,serp-method}
\alias{trans_plot,serp-method}
\title{Plot Ribosome density Across Transcripts}
\usage{
\S4method{trans_plot}{serp}(
  object,
  merge_rep = FALSE,
  var_alpha = 0.5,
  retain_cds = TRUE,
  mode = c("codon", "nt"),
  new_signal_range = FALSE,
  enrich_threshold = 1,
  range_x = 0.99,
  range_y = 0.98,
  range_size = 4,
  range_digit = 1,
  exon_line = c("grey", 3),
  cds_line = c("grey30", 7),
  facet = facet_grid(sample ~ rname, switch = "y"),
  nrow = NULL,
  ncol = NULL,
  return_data = FALSE
)
}
\arguments{
\item{object}{A \code{serp} object. Must contain the slots \code{total_occupancy}, \code{ip_occupancy}, and \code{features}.}

\item{merge_rep}{Logical. If \code{TRUE}, biological replicates are merged (by \code{sample_group}) and plotted with mean values and shaded standard deviation ribbons. Default: \code{FALSE}.}

\item{var_alpha}{Numeric. Transparency level for the shaded ribbon when \code{merge_rep = TRUE}. Default: 0.5.}

\item{retain_cds}{Logical. If \code{TRUE}, restricts plotting to coding sequence (CDS) regions only. Default: \code{TRUE}.}

\item{mode}{Character. Resolution of x-axis: either \code{"codon"} (default) for amino acid-level or \code{"nt"} for nucleotide-level.}

\item{new_signal_range}{Logical. Whether to annotate the plot with the observed signal range. Default: \code{FALSE}.}

\item{enrich_threshold}{Numeric. Not used in current implementation but included for compatibility with other functions. Default: 1.}

\item{range_x}{X position (normalized 0–1) for the signal range label. Default: 0.98.}

\item{range_y}{Y position (normalized 0–1) for the signal range label. Default: 0.98.}

\item{range_size}{Numeric. Font size of the signal range label. Default: 4.}

\item{range_digit}{Integer. Number of digits to round the signal range annotation. Default: 1.}

\item{exon_line}{Character vector of length 2 (e.g., \code{c("grey", 3)}). Specifies the color and line width of the exon annotation in \code{"nt"} mode.}

\item{cds_line}{Character vector of length 2 (e.g., \code{c("grey30", 7)}). Specifies the color and line width of the CDS annotation.}

\item{facet}{ggplot2 facet. Default is \code{facet_grid(sample ~ rname, switch = "y")}.}

\item{nrow}{Number of rows in the final layout when multiple transcripts are plotted. Passed to \code{cowplot::plot_grid()}.}

\item{ncol}{Number of columns in the final layout when multiple transcripts are plotted. Passed to \code{cowplot::plot_grid()}.}

\item{return_data}{Logical. If \code{TRUE}, return the underlying processed data instead of plot. Default: \code{FALSE}.}
}
\value{
A \code{ggplot} object or a \code{data.frame} if \code{return_data = TRUE}.
}
\description{
Visualize interactive ribosome profiling (IP) or total ribosome (total) signal across
the transcript body for one or more transcripts from a \code{serp} object. This function
supports codon- or nucleotide-resolution visualization, replicate merging, structural
annotations (e.g., exon and CDS information), and optional summary statistics.
}
\details{
This function aggregates and visualizes transcript-level signal for both IP (immunoprecipitation)
and total RNA data stored in a \code{serp} object. It supports CDS-only rendering, codon resolution,
and shows structure annotations such as exon and coding regions using \code{ggside} extensions.

If \code{merge_rep = TRUE}, signals for replicate samples belonging to the same \code{sample_group}
are averaged, and standard deviation is visualized using \code{geom_ribbon()}.

The object returned is either a \code{ggplot} object or a \code{data.frame} if \code{return_data = TRUE}.

Requires pre-computed smooth signal (column named \code{smooth}) within the IP and total input data.
}
\examples{
\dontrun{
# Plot ribosome and total signal at codon resolution
trans_plot(serp_obj, mode = "codon")

# Merge replicates and plot with standard deviation shading
trans_plot(serp_obj, merge_rep = TRUE)

# Return processed data without plotting
data <- trans_plot(serp_obj, return_data = TRUE)
}
}
