// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// boot_stat
arma::mat boot_stat(const arma::mat& mat, const arma::umat& boot_indices, std::string method);
RcppExport SEXP _riboTransVis_boot_stat(SEXP matSEXP, SEXP boot_indicesSEXP, SEXP methodSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type mat(matSEXP);
    Rcpp::traits::input_parameter< const arma::umat& >::type boot_indices(boot_indicesSEXP);
    Rcpp::traits::input_parameter< std::string >::type method(methodSEXP);
    rcpp_result_gen = Rcpp::wrap(boot_stat(mat, boot_indices, method));
    return rcpp_result_gen;
END_RCPP
}
// rolling_window_sum
NumericVector rolling_window_sum(NumericVector positions, NumericVector expressions, double window, String type);
RcppExport SEXP _riboTransVis_rolling_window_sum(SEXP positionsSEXP, SEXP expressionsSEXP, SEXP windowSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type positions(positionsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type expressions(expressionsSEXP);
    Rcpp::traits::input_parameter< double >::type window(windowSEXP);
    Rcpp::traits::input_parameter< String >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(rolling_window_sum(positions, expressions, window, type));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_riboTransVis_boot_stat", (DL_FUNC) &_riboTransVis_boot_stat, 3},
    {"_riboTransVis_rolling_window_sum", (DL_FUNC) &_riboTransVis_rolling_window_sum, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_riboTransVis(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
